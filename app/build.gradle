apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

ext.majorVersion = 0
ext.minorVersion = 0
ext.patchVersion = 1
ext.preRelease = ""

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.andro.indie.school.cryptotracker"
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode generateVersionCode()
        versionName generateVersionName()
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        buildTypes {
            debug {
                testCoverageEnabled = true
                minifyEnabled false
                debuggable true
            }
            release {
                debuggable false
                minifyEnabled true
                zipAlignEnabled true
                shrinkResources true
                crunchPngs true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "CryptoTracker-${variant.versionName}.apk"
        }
    }

    androidExtensions {
        experimental = true
    }
}

ext {
    supportLibraryVersion = '26.1.0'
    constrainLayoutVersion = '1.1.0-beta4'
    okHttp3Version = '3.8.1'
    rxJava2Version = '2.1.2'
    rxAndroid2Version = '2.0.1'
    retrofit2Version = '2.3.0'
    retrofitRx2AdapterVersion = '2.3.0'
    daggerVersion = '2.11'
    ankoVersion = '0.10.3'
    espressoCoreVersion = '3.0.1'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:${kotlinVersion}"
    implementation "com.android.support:appcompat-v7:${supportLibraryVersion}"
    implementation "com.android.support:cardview-v7:${supportLibraryVersion}"
    implementation "com.android.support:design:${supportLibraryVersion}"
    implementation "com.android.support:support-v4:${supportLibraryVersion}"
    implementation "com.android.support:recyclerview-v7:${supportLibraryVersion}"
    implementation "com.android.support.constraint:constraint-layout:${constrainLayoutVersion}"

    implementation "com.squareup.okhttp3:okhttp:${okHttp3Version}"
    implementation "com.squareup.okhttp3:logging-interceptor:${okHttp3Version}"

    implementation "io.reactivex.rxjava2:rxjava:${rxJava2Version}"
    implementation "io.reactivex.rxjava2:rxandroid:${rxAndroid2Version}"

    implementation "com.squareup.retrofit2:retrofit:${retrofit2Version}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofit2Version}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofitRx2AdapterVersion}"

    implementation "com.google.dagger:dagger:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"

    implementation "org.jetbrains.anko:anko:${ankoVersion}"
    implementation "org.jetbrains.anko:anko-commons:${ankoVersion}"

    testImplementation "junit:junit:4.12"
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${espressoCoreVersion}"
}

private Integer generateVersionCode() {
    return project.ext.minSdkVersion * 10000000 + ext.majorVersion * 10000 + ext.minorVersion * 100 + ext.patchVersion
}

private String generateVersionName() {
    String versionName = "${ext.majorVersion}.${ext.minorVersion}.${ext.patchVersion}"
    if (ext.preRelease != null && !ext.preRelease.isEmpty()) {
        versionName = versionName + "-" + ext.preRelease
    }
    return versionName
}
